using rl    := #import "raylib.lan";
using basic := #import "std/basic.lang";

// TODO local structs
Guy :: struct {
    x := 400;
    y := 300;
    radius := 10.0; // TODO: float literals don't implicitly cast to f32

    color: rl.Color;
}

main :: proc() {

    rl.set_target_fps(60);

    rl.init_window(WIDTH, HEIGHT, "my window title");
    defer rl.close_window();

    guy: Guy;
    guy.color  = rl.Red();
    guy.radius = 50.0;

    enemy: Guy;
    enemy.color  = rl.Blue();
    enemy.radius = 60.0;
    enemy.x = 72
    enemy.y = 64

    bg_color := rl.White()

    dt: f64 = 0.0;
    dt_end: f64 = 0.0;

    // TODO this was passing type-checking as void
    while !rl.window_should_close() {
        // TODO rewrite entire expression parser lol
        now := rl.get_time();
        dt = (now - dt_end);

        movement_amount := SPEED;

        basic.printf("dt = %f\nguy.x = %d\nmovement_amount = %f".data, dt, guy.x, movement_amount);

        if rl.IsKeyDown(KEY_W) {
            basic.printf("pressing w\n".data);
            guy.y -= movement_amount;
        }
        if rl.IsKeyDown(KEY_S)  then guy.y += movement_amount;
        if rl.IsKeyDown(KEY_A)  then guy.x -= movement_amount;
        if rl.IsKeyDown(KEY_D) then guy.x += movement_amount;

        x := rl.get_mouse_x()
        y := rl.get_mouse_y()
        basic.printf("(%d, %d)\n".data, x, y)

        rl.begin_drawing();
            rl.clear_background(bg_color);
            rl.draw_circle(guy.x, guy.y, cast(f32)guy.radius, guy.color);
            rl.draw_circle(enemy.x, enemy.y, cast(f32)enemy.radius, enemy.color);
        rl.end_drawing();

        dt_end = rl.get_time()
    }
}

WIDTH     :: 800;
HEIGHT    :: 600;
// KEY_UP    :: 265;
// KEY_DOWN  :: 264;
// KEY_LEFT  :: 263;
// KEY_RIGHT :: 262;
SPEED     :: 1000.0;
KEY_A :: 65;
KEY_D :: 68;
KEY_W :: 87;
KEY_S :: 83;

// TODO line 14 blocks crash

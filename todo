AstCall needs to be able to be parsed as an expression OR statement

Embed AstError into AstDecl, AstExpr, AstStmt.
    Write decl_error_node(), expr_error_node(), stmt_error_node()
    Change AstNode*'s to be more specific, e.g:
        struct AstVar {
            ...
            AstExpr *value;
        }

Check array index assignments
Call modifiers e.g: a := inline some_call()
    inline is added to lexer

Check binary maths
Dereference
Check if the casts expression can even be casted to the requested type
Foreign function decorator
Check if branches
Check while loops

Change AstBinary stmt to AstAssignment

//
// AST
//
Fix the subtree allocator leak.

//
// Checker
//

Anonymous structs

Check in typedef'd structs that they don't mention their own names unless it's a pointer.

Check that procs with return types have return statements.

When local procedures are implemented, proc calls will need to be checked using lookup_local or something else.

//
// Syntax
//

Allocate and zero out syntax
t: *T = alloct(1){0};

Enum composition

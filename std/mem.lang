b := #import "std/basic.lang"

Arena :: struct {
    fixed    : bool = true;
    cursor   : int  = 0;
    capacity : int  = 2048;
    mem: ^u8 = b.malloc(2048); // TODO this is a bad idea
}

arena_init :: proc(a: ^Arena, cap: u64) {
    if a.mem {
        free(a.mem);
        a.mem = null;
    }
    a.mem = b.alloc(cap);
    a.fixed = false;
    a.cursor = 0;
    a.capacity = cap;
}

arena_alloc :: proc(a: ^Arena, size: u64) -> ^u8 {
    if !arena_maybe_grow(a, size) then return null;
    ret := a.mem + a.cursor;
    a.cursor += size;
    return ret;
}

arena_free :: proc(a: ^Arena) {
    b.free(a.mem);
    a.fixed = false;
    a.cursor = 0;
    a.capacity = 0;
}

// Returns true if allocation is possible, otherwise false.
arena_maybe_grow :: proc(a: ^Arena, desired_size: u64) -> bool {
    if !a.fixed && (a.cursor + desired_size) > a.capacity {
        a.capacity *= 2;
        tmp := cast(^u8)b.realloc(a.mem, a.capacity);
        if !tmp then return false;
        a.mem = tmp;
        return true;
    }
    return true;
}

Entity :: struct {
    name: string;
}

// Player :: Entity;

// non_const := 10;
// CONST :: non_const;

main :: proc() {
	some_type :: int;
	a: some_type;

	i := CONSTANT;
	a = i;

	CONSTANT :: 10;

    entity: Entity;
    basic.Print(entity.name.data);

    arr:  []int;
    array_add(^arr, 10);
}

array_add :: proc(array: ^[]int, item: int) -> void {
   if array.length > array.capacity {
       data := cast(^int) alloc(array.capacity);
       if data then array.data = data;
       else then return;
   }
   array.data[array.length] = item;
}

glfwInit :: proc() -> bool #foreign "glfwInit": Glfw3

alloc    :: proc(size: u64) -> ^void #foreign "malloc";
print    :: proc(fmt: ^u8) ->   int #foreign "puts";

Glfw3 :: #static_library "glfw3"

basic := #import "std/basic.lang";

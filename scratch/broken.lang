//
// Entry point
//
proc free(p: ^void){}
proc printf(s: string){}

proc main(): int {
    i := 2
    a := true
    if !a {
        printf("Incorrect number of arguments.\n")
        return 0
    } else if 1 {
        return 1
    } else {

    }

    file_data := ""

    lexer: ^Lexer = null
    lexer_init(lexer, file_data)

    free(lexer)

    //e := (m * c) * (m * c) + 1
    
    return 0
}

type Lexer: struct {
    curr: ^u8
    start: ^u8
    line: u64
    column: u32
    last: int
    string_allocator: struct {
        block: ^u8;
        cap: int;
        len: int;
    }
    //string_allocator: mem.Pool
}

proc lexer_init(l: ^Lexer, ss: string): bool {
    l.curr = ss.data
    l.start = ss.data
    l.line = 1
    l.column = 1
    l.last = Token_EOF
    return true
}

//
// Entry point
//
proc main_(): int {
    i := "aaaaaaaaaaaaa"
    if true {
        printf("Incorrect number of arguments.\n")
        return 0
    } else if 1 {
        return 1
    } else {

    }
    
    lexer: Lexer;
    lexer_init(^lexer, file_data)

    //e := (m * c) * (m * c) + 1
    
    return 0
}

type L: struct {
    curr: ^u8
    start: ^u8
    line: u64
    column: u32
    last: int
    string_allocator: struct {
        block: ^u8;
        cap: int;
        len: int;
    }
    //string_allocator: mem.Pool
}

Token_EOF := 0

type String: struct {
    data: ^u8;
    length: u64;
}

proc make_lexer(l: ^Lexer, s: string): bool {
    l.curr = s.data
    l.start = s.data
    l.line = 1
    l.column = 1
    l.last = Token_EOF
    return true
}

//
// Entry point
//
proc m() {
    count := 11211
    i := count == 2
}
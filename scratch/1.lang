proc main(): void {
    args: []string
    args[10] = ""
    i: []int
    i[0] = 10
    sum : int = -i[0]
    //return args[10]
}

type T: int;

proc whatever() {
    f: Field
    i: int
    ttt: T;
    ip: ^int = ^i
    *f.name = "Anthony"
    f.not_ptr = *ip
}

proc _1() {
    i := 10 + "st" // error
}

type Field: struct {
    name: ^string
    not_ptr: int
}

// 
// for modules, could just load all the symbols from the files into
// memory and then generate an imports struct with all the variables and function pointers inside.

// os := import "operatingsystem"
// i := os.args
// Behind the scenes
// type os: struct {
//   args := 12 // const eval'd value
// }
